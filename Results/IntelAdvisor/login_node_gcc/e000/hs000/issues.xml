<?xml version='1.0' encoding='UTF-8'?>

<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:float="http://www.w3.org/2001/XMLSchema#float" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt" xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong" int:version="16">
 <issues>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>62</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <traits>Type Conversions</traits>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>1</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>80</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>80</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>3</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>94</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>110</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>110</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>112</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15382</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop has a call to a function that has no vector version.&lt;/li&gt; &lt;li&gt;A user-defined vector function cannot be vectorized because the function body invokes other functions that cannot be vectorized. &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example:&lt;/b&gt; &lt;div class=&quot;sample&quot;&gt; #include &amp;lt;iostream&amp;gt;&lt;br/&gt; #include &amp;lt;complex&amp;gt;&lt;br/&gt; using namespace std;&lt;br/&gt; int main() {&lt;br/&gt; &amp;nbsp;&amp;nbsp;float c[10];&lt;br/&gt; &amp;nbsp;&amp;nbsp;c[:] = 0.f;&lt;br/&gt; &amp;nbsp;&amp;nbsp;for(int i = 0; i &amp;lt; 10; i++)&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout &amp;lt;&amp;lt; c[i] &amp;lt;&amp;lt; &quot;n&quot;;&lt;br/&gt; &amp;nbsp;&amp;nbsp;return 0;&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Call to function cannot be vectorized </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15382</id>
     <text>If possible, define a vector version for the function using a construct: &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target &lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Construct &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source function&lt;/td&gt; &lt;td&gt;#pragma omp declare simd&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source function&lt;/td&gt; &lt;td&gt;_declspec(vector) (Windows OS) or _attribute_(vector) (Linux OS)&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;b&gt;Read More C++ Information:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15527&quot;&gt;https://software.intel.com/en-us/articles/cdiag15127&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B847FED8-4D82-4250-A241-8755134F210F.html&quot;&gt;omp declare simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-2B528C72-29B4-4DBC-8B91-EE4D1A03A850.html&quot;&gt;vector&lt;/a&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>112</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>125</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15333</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Cause:&lt;/b&gt; The compiler automatically generates a try block for a program block (that is, code inside {}) when it allocates a large, local object or array on the heap (because the object is too big to allocate on the stack) and a function within the block could throw an exception. &lt;br/&gt; &lt;b&gt;C++ Example:&lt;/b&gt;&lt;/br&gt; &lt;div class=&quot;sample&quot;&gt;__attribute__((vector)) void f1(double);&lt;br/&gt;
int main() &lt;br/&gt;
{&lt;br/&gt;
  int n = 10000;&lt;br/&gt;
  double a[n];&lt;br/&gt;
  #pragma simd&lt;br/&gt;
  for(int i = 0 ; i &amp;lt; n ; i++)&lt;br/&gt;
    f1(a[i]);&lt;br/&gt;
}&lt;/div&gt;  </text>
   <title>Exception Handling For a Call Prevents Vectorization </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15333</id>
     <text>Avoid exceptions within a vectorizable loop body by marking functions as &lt;div class=&quot;inplace_sample&quot;&gt;nothrow&lt;/div&gt;.
&lt;div class=&quot;sample&quot;&gt;__attribute__((vector, nothrow)) void f1(double);&lt;/div&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>125</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>126</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>129</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>132</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>134</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>134</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15333</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Cause:&lt;/b&gt; The compiler automatically generates a try block for a program block (that is, code inside {}) when it allocates a large, local object or array on the heap (because the object is too big to allocate on the stack) and a function within the block could throw an exception. &lt;br/&gt; &lt;b&gt;C++ Example:&lt;/b&gt;&lt;/br&gt; &lt;div class=&quot;sample&quot;&gt;__attribute__((vector)) void f1(double);&lt;br/&gt;
int main() &lt;br/&gt;
{&lt;br/&gt;
  int n = 10000;&lt;br/&gt;
  double a[n];&lt;br/&gt;
  #pragma simd&lt;br/&gt;
  for(int i = 0 ; i &amp;lt; n ; i++)&lt;br/&gt;
    f1(a[i]);&lt;br/&gt;
}&lt;/div&gt;  </text>
   <title>Exception Handling For a Call Prevents Vectorization </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15333</id>
     <text>Avoid exceptions within a vectorizable loop body by marking functions as &lt;div class=&quot;inplace_sample&quot;&gt;nothrow&lt;/div&gt;.
&lt;div class=&quot;sample&quot;&gt;__attribute__((vector, nothrow)) void f1(double);&lt;/div&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>136</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15333</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Cause:&lt;/b&gt; The compiler automatically generates a try block for a program block (that is, code inside {}) when it allocates a large, local object or array on the heap (because the object is too big to allocate on the stack) and a function within the block could throw an exception. &lt;br/&gt; &lt;b&gt;C++ Example:&lt;/b&gt;&lt;/br&gt; &lt;div class=&quot;sample&quot;&gt;__attribute__((vector)) void f1(double);&lt;br/&gt;
int main() &lt;br/&gt;
{&lt;br/&gt;
  int n = 10000;&lt;br/&gt;
  double a[n];&lt;br/&gt;
  #pragma simd&lt;br/&gt;
  for(int i = 0 ; i &amp;lt; n ; i++)&lt;br/&gt;
    f1(a[i]);&lt;br/&gt;
}&lt;/div&gt;  </text>
   <title>Exception Handling For a Call Prevents Vectorization </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15333</id>
     <text>Avoid exceptions within a vectorizable loop body by marking functions as &lt;div class=&quot;inplace_sample&quot;&gt;nothrow&lt;/div&gt;.
&lt;div class=&quot;sample&quot;&gt;__attribute__((vector, nothrow)) void f1(double);&lt;/div&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>137</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>139</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_user_functions_prevent_vectorization</id>
   <int:severity>1</int:severity>
   <text>User-defined functions in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; are preventing the compiler from vectorizing the loop. </text>
   <title>User function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_user_function_prevent_vectorization_try_simd_c</id>
     <text>Some user-defined function(s) are not vectorized or inlined by the compiler. To fix: Do one of the following: &lt;ul&gt; &lt;li&gt; Enforce vectorization of the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; by means of SIMD instructions and/or create a SIMD version of the function(s) using a &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;directive&lt;/a&gt;: &lt;table&gt; &lt;tr&gt; &lt;th&gt; Target &lt;/th&gt; &lt;th&gt; Directive &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; Source Loop &lt;/td&gt; &lt;td&gt; #pragma simd or #pragma omp simd &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; Inner function definition or declaration &lt;/td&gt; &lt;td&gt; #pragma omp declare simd &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;li&gt; If using the &lt;div class=&quot;inplace_sample&quot;&gt;Ob&lt;/div&gt; or &lt;div class=&quot;inplace_sample&quot;&gt;inline-level&lt;/div&gt; compiler option to control inline expansion with the &lt;div class=&quot;inplace_sample&quot;&gt;1&lt;/div&gt; argument, use an &lt;div class=&quot;inplace_sample&quot;&gt;inline&lt;/div&gt; keyword to enable inlining or replace the &lt;div class=&quot;inplace_sample&quot;&gt;1&lt;/div&gt; argument with &lt;div class=&quot;inplace_sample&quot;&gt;2&lt;/div&gt; to enable inlining of any function at compiler discretion. &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.htm&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-B847FED8-4D82-4250-A241-8755134F210F.htm&quot;&gt;omp declare simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.htm&quot;&gt;simd&lt;/a&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/getting-started-with-intel-composer-xe-2013-compiler-pragmas-and-directives&quot;&gt;Getting Started with Intel Compiler Pragmas and Directives&lt;/a&gt; and &lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt; &lt;/ul&gt; </text>
     <title>Vectorize serialized function(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters>
      <user_functions arrayOf="item">
       <item>solvers::fwavesolver&lt;double&gt;::determinewetdrystate</item>
      </user_functions>
     </parameters>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>139</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15382</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop has a call to a function that has no vector version.&lt;/li&gt; &lt;li&gt;A user-defined vector function cannot be vectorized because the function body invokes other functions that cannot be vectorized. &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example:&lt;/b&gt; &lt;div class=&quot;sample&quot;&gt; #include &amp;lt;iostream&amp;gt;&lt;br/&gt; #include &amp;lt;complex&amp;gt;&lt;br/&gt; using namespace std;&lt;br/&gt; int main() {&lt;br/&gt; &amp;nbsp;&amp;nbsp;float c[10];&lt;br/&gt; &amp;nbsp;&amp;nbsp;c[:] = 0.f;&lt;br/&gt; &amp;nbsp;&amp;nbsp;for(int i = 0; i &amp;lt; 10; i++)&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout &amp;lt;&amp;lt; c[i] &amp;lt;&amp;lt; &quot;n&quot;;&lt;br/&gt; &amp;nbsp;&amp;nbsp;return 0;&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Call to function cannot be vectorized </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15382</id>
     <text>If possible, define a vector version for the function using a construct: &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target &lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Construct &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source function&lt;/td&gt; &lt;td&gt;#pragma omp declare simd&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source function&lt;/td&gt; &lt;td&gt;_declspec(vector) (Windows OS) or _attribute_(vector) (Linux OS)&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;b&gt;Read More C++ Information:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15527&quot;&gt;https://software.intel.com/en-us/articles/cdiag15127&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B847FED8-4D82-4250-A241-8755134F210F.html&quot;&gt;omp declare simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-2B528C72-29B4-4DBC-8B91-EE4D1A03A850.html&quot;&gt;vector&lt;/a&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>142</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>144</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_user_functions_prevent_vectorization</id>
   <int:severity>1</int:severity>
   <text>User-defined functions in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; are preventing the compiler from vectorizing the loop. </text>
   <title>User function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_user_function_prevent_vectorization_try_simd_c</id>
     <text>Some user-defined function(s) are not vectorized or inlined by the compiler. To fix: Do one of the following: &lt;ul&gt; &lt;li&gt; Enforce vectorization of the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; by means of SIMD instructions and/or create a SIMD version of the function(s) using a &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;directive&lt;/a&gt;: &lt;table&gt; &lt;tr&gt; &lt;th&gt; Target &lt;/th&gt; &lt;th&gt; Directive &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; Source Loop &lt;/td&gt; &lt;td&gt; #pragma simd or #pragma omp simd &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; Inner function definition or declaration &lt;/td&gt; &lt;td&gt; #pragma omp declare simd &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;li&gt; If using the &lt;div class=&quot;inplace_sample&quot;&gt;Ob&lt;/div&gt; or &lt;div class=&quot;inplace_sample&quot;&gt;inline-level&lt;/div&gt; compiler option to control inline expansion with the &lt;div class=&quot;inplace_sample&quot;&gt;1&lt;/div&gt; argument, use an &lt;div class=&quot;inplace_sample&quot;&gt;inline&lt;/div&gt; keyword to enable inlining or replace the &lt;div class=&quot;inplace_sample&quot;&gt;1&lt;/div&gt; argument with &lt;div class=&quot;inplace_sample&quot;&gt;2&lt;/div&gt; to enable inlining of any function at compiler discretion. &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.htm&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-B847FED8-4D82-4250-A241-8755134F210F.htm&quot;&gt;omp declare simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.htm&quot;&gt;simd&lt;/a&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/getting-started-with-intel-composer-xe-2013-compiler-pragmas-and-directives&quot;&gt;Getting Started with Intel Compiler Pragmas and Directives&lt;/a&gt; and &lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt; &lt;/ul&gt; </text>
     <title>Vectorize serialized function(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters>
      <user_functions arrayOf="item">
       <item>solvers::fwavesolver&lt;double&gt;::determinewetdrystate</item>
      </user_functions>
     </parameters>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>144</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15382</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop has a call to a function that has no vector version.&lt;/li&gt; &lt;li&gt;A user-defined vector function cannot be vectorized because the function body invokes other functions that cannot be vectorized. &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example:&lt;/b&gt; &lt;div class=&quot;sample&quot;&gt; #include &amp;lt;iostream&amp;gt;&lt;br/&gt; #include &amp;lt;complex&amp;gt;&lt;br/&gt; using namespace std;&lt;br/&gt; int main() {&lt;br/&gt; &amp;nbsp;&amp;nbsp;float c[10];&lt;br/&gt; &amp;nbsp;&amp;nbsp;c[:] = 0.f;&lt;br/&gt; &amp;nbsp;&amp;nbsp;for(int i = 0; i &amp;lt; 10; i++)&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout &amp;lt;&amp;lt; c[i] &amp;lt;&amp;lt; &quot;n&quot;;&lt;br/&gt; &amp;nbsp;&amp;nbsp;return 0;&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Call to function cannot be vectorized </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15382</id>
     <text>If possible, define a vector version for the function using a construct: &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target &lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Construct &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source function&lt;/td&gt; &lt;td&gt;#pragma omp declare simd&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source function&lt;/td&gt; &lt;td&gt;_declspec(vector) (Windows OS) or _attribute_(vector) (Linux OS)&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;b&gt;Read More C++ Information:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15527&quot;&gt;https://software.intel.com/en-us/articles/cdiag15127&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B847FED8-4D82-4250-A241-8755134F210F.html&quot;&gt;omp declare simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-2B528C72-29B4-4DBC-8B91-EE4D1A03A850.html&quot;&gt;vector&lt;/a&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>146</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mix" ops_type="float"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_mostly_memory_bound</id>
     <text>roofline_guidance_mostly_memory_bound_text</text>
     <title>This loop is mostly memory bound but may also be compute bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <traits>Divisions</traits>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>2</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>152</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>152</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15536</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Cause:&lt;/b&gt; The inner loop has an irregular structure. For example, it may have non-constant lower and higher bounds, a non-constant step for iterations, more than one entry, some assembly parts, volatile variables, long jumps, or complex switch clauses.&lt;br/&gt; </text>
   <title>Inner loop throttling prevents vectorization of this outer loop</title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15536</id>
     <text>See the inner loop message for more details and simplify the inner loop structure.&lt;br/&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15536&quot;&gt;https://software.intel.com/en-us/articles/cdiag15536&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Fortran information at &lt;a href=&quot;https://software.intel.com/en-us/articles/fdiag15536&quot;&gt;https://software.intel.com/en-us/articles/fdiag15536&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>154</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15523</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Causes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The loop iteration count is not available before the loop executes.&lt;/li&gt; &lt;li&gt;The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;C++ Example 1:&lt;/b&gt; The upper bound of the loop iteration count is controlled by &lt;div class=&quot;inplace_sample&quot;&gt;bar()&lt;/div&gt;, whose implementation is available in this compilation unit. Because the loop iteration count is not available before the loop executes, the compiler cannot determine: &lt;ul&gt; &lt;li&gt;How to map the loop to vector registers&lt;/li&gt; &lt;li&gt;If it needs to create peeled and remainder loops &lt;/li&gt; &lt;li&gt;Where it has enough iterations to saturate at least one vector register&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sample&quot;&gt; void foo (float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; bar(int(A[0])); i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;b&gt;C++ Example 2:&lt;/b&gt; The compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries. &lt;div class=&quot;sample&quot;&gt; struct Dim { int x, y, z; };&lt;br/&gt; Dim dim;&lt;br/&gt; double *B;&lt;br/&gt;&lt;br/&gt; void foo (double* A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; dim.x; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = B[i];&lt;br/&gt; &amp;nbsp;&amp;nbsp}&lt;br/&gt; } &lt;/div&gt; </text>
   <title>Cannot compute loop iteration count before executing the loop </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15523</id>
     <text>&lt;ul&gt; &lt;li&gt; For &lt;b&gt;Example 1&lt;/b&gt;, where the loop iteration count is not available before the loop executes: If the loop iteration count and iterations lower bound can be calculated for the whole loop: &lt;ul&gt; &lt;li&gt;Move the calculation outside the loop using an additional variable.&lt;/li&gt; &lt;li&gt;Rewrite the loop to avoid &lt;div class=&quot;inplace_sample&quot;&gt;goto&lt;/div&gt; statements or other early exits from the loop.&lt;/li&gt; &lt;li&gt;Identify the loop iterations lower bound using a constant.&lt;/li&gt; &lt;/ul&gt; For example, introduce the new &lt;div class=&quot;inplace_sample&quot;&gt;limit&lt;/div&gt; variable: &lt;div class=&quot;sample&quot;&gt; void foo(float *A) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;int i;&lt;br/&gt; &amp;nbsp;&amp;nbsp;int OuterCount = 90;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&lt;b&gt;int limit = bar(int(A[0]));&lt;/b&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;while (OuterCount &amp;gt; 0) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i = 1; i &amp;lt; limit; i++) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A[i] = i + 4;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OuterCount--;&lt;br/&gt; &amp;nbsp;&amp;nbsp;}&lt;br/&gt; } &lt;/div&gt; &lt;/li&gt; &lt;li&gt; For &lt;b&gt;Example 2&lt;/b&gt;, where the compiler cannot determine if there is aliasing between all the pointers used inside the loop and loop boundaries: Assign the loop boundary value to a local variable. In most cases, this is enough for the compiler to determine aliasing may not occur.&lt;br/&gt; You can use a directive to accomplish the same thing automatically. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma simd or #pragma omp simd&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; Do not use global variables or indirect accesses as loop boundaries unless you also use one of the following: &lt;ul&gt; &lt;li&gt; Directive to ignore vector dependencies &lt;table&gt; &lt;tr&gt; &lt;th&gt;Target&lt;/th&gt; &lt;th&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;ICL/ICC/ICPC&lt;/a&gt; Directive&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Source loop&lt;/th&gt; &lt;td&gt;#pragma ivdep&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/li&gt; &lt;li&gt;&lt;div class=&quot;inplace_sample&quot;&gt;restrict&lt;/div&gt; keyword.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;C++ information at &lt;a href=&quot;https://software.intel.com/en-us/articles/cdiag15523&quot;&gt;https://software.intel.com/en-us/articles/cdiag15523&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B25ABCC2-BE6F-4599-AEDF-2434F4676E1B.html&quot;&gt;ivdep&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.html&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.html&quot;&gt;simd&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>163</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>69</unsignedInt:flags>
   <id>issue_assumed_dependency</id>
   <int:severity>2</int:severity>
   <text>The compiler assumed there is an anti-dependency (Write after read - WAR) or true dependency (Read after write - RAW) in the loop. Improve performance by investigating the assumption and handling accordingly. </text>
   <title>Assumed dependency present </title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_assumed_dependency_run_correctness_c</id>
     <text/>
     <title>Confirm dependency is real </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:no_dependency_disclaimer>true</boolean:no_dependency_disclaimer>
     </parameters>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>185</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>3</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>185</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15344</id>
   <int:severity>1</int:severity>
   <text>compiler_diag_issue_15344_text</text>
   <title>compiler_diag_issue_15344_title</title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15344</id>
     <text>compiler_diag_rec_15344_text</text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>185</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>190</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>69</unsignedInt:flags>
   <id>issue_assumed_dependency</id>
   <int:severity>2</int:severity>
   <text>The compiler assumed there is an anti-dependency (Write after read - WAR) or true dependency (Read after write - RAW) in the loop. Improve performance by investigating the assumption and handling accordingly. </text>
   <title>Assumed dependency present </title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_assumed_dependency_run_correctness_c</id>
     <text/>
     <title>Confirm dependency is real </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:no_dependency_disclaimer>true</boolean:no_dependency_disclaimer>
     </parameters>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>193</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15344</id>
   <int:severity>1</int:severity>
   <text>compiler_diag_issue_15344_text</text>
   <title>compiler_diag_issue_15344_title</title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15344</id>
     <text>compiler_diag_rec_15344_text</text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>193</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>193</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>69</unsignedInt:flags>
   <id>issue_assumed_dependency</id>
   <int:severity>2</int:severity>
   <text>The compiler assumed there is an anti-dependency (Write after read - WAR) or true dependency (Read after write - RAW) in the loop. Improve performance by investigating the assumption and handling accordingly. </text>
   <title>Assumed dependency present </title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_assumed_dependency_run_correctness_c</id>
     <text/>
     <title>Confirm dependency is real </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:no_dependency_disclaimer>true</boolean:no_dependency_disclaimer>
     </parameters>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>215</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15344</id>
   <int:severity>1</int:severity>
   <text>compiler_diag_issue_15344_text</text>
   <title>compiler_diag_issue_15344_title</title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15344</id>
     <text>compiler_diag_rec_15344_text</text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>215</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>215</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>218</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mix" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_callstacks</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect FLOP data with callstacks </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_mostly_memory_bound</id>
     <text>roofline_guidance_mostly_memory_bound_text</text>
     <title>This loop is mostly memory bound but may also be compute bound </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>1</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>253</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>253</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mix" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_mostly_memory_bound</id>
     <text>roofline_guidance_mostly_memory_bound_text</text>
     <title>This loop is mostly memory bound but may also be compute bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>3</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>276</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>302</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15333</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Cause:&lt;/b&gt; The compiler automatically generates a try block for a program block (that is, code inside {}) when it allocates a large, local object or array on the heap (because the object is too big to allocate on the stack) and a function within the block could throw an exception. &lt;br/&gt; &lt;b&gt;C++ Example:&lt;/b&gt;&lt;/br&gt; &lt;div class=&quot;sample&quot;&gt;__attribute__((vector)) void f1(double);&lt;br/&gt;
int main() &lt;br/&gt;
{&lt;br/&gt;
  int n = 10000;&lt;br/&gt;
  double a[n];&lt;br/&gt;
  #pragma simd&lt;br/&gt;
  for(int i = 0 ; i &amp;lt; n ; i++)&lt;br/&gt;
    f1(a[i]);&lt;br/&gt;
}&lt;/div&gt;  </text>
   <title>Exception Handling For a Call Prevents Vectorization </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15333</id>
     <text>Avoid exceptions within a vectorizable loop body by marking functions as &lt;div class=&quot;inplace_sample&quot;&gt;nothrow&lt;/div&gt;.
&lt;div class=&quot;sample&quot;&gt;__attribute__((vector, nothrow)) void f1(double);&lt;/div&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>302</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="comp" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_compute_bound</id>
     <text>roofline_guidance_compute_bound_text</text>
     <title>This loop is mostly compute bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>0</int:limiting_roof>
     </parameters>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>307</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mix" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_mostly_compute_bound</id>
     <text>roofline_guidance_mostly_compute_bound_text</text>
     <title>This loop is mostly compute bound but may also be memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>0</int:limiting_roof>
     </parameters>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>312</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_callstacks</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect FLOP data with callstacks </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>2</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>315</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="float"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>3</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>326</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>3</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>329</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="int"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>3</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>332</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>578</unsignedInt:flags>
   <id>compiler_diag_issue_0</id>
   <int:severity>1</int:severity>
   <text/>
   <title/>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations/>
   <unsignedLong:rowKey>436</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>66</unsignedInt:flags>
   <id>compiler_diag_issue_15333</id>
   <int:severity>1</int:severity>
   <text>&lt;b&gt;Cause:&lt;/b&gt; The compiler automatically generates a try block for a program block (that is, code inside {}) when it allocates a large, local object or array on the heap (because the object is too big to allocate on the stack) and a function within the block could throw an exception. &lt;br/&gt; &lt;b&gt;C++ Example:&lt;/b&gt;&lt;/br&gt; &lt;div class=&quot;sample&quot;&gt;__attribute__((vector)) void f1(double);&lt;br/&gt;
int main() &lt;br/&gt;
{&lt;br/&gt;
  int n = 10000;&lt;br/&gt;
  double a[n];&lt;br/&gt;
  #pragma simd&lt;br/&gt;
  for(int i = 0 ; i &amp;lt; n ; i++)&lt;br/&gt;
    f1(a[i]);&lt;br/&gt;
}&lt;/div&gt;  </text>
   <title>Exception Handling For a Call Prevents Vectorization </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>compiler_diag_rec_15333</id>
     <text>Avoid exceptions within a vectorizable loop body by marking functions as &lt;div class=&quot;inplace_sample&quot;&gt;nothrow&lt;/div&gt;.
&lt;div class=&quot;sample&quot;&gt;__attribute__((vector, nothrow)) void f1(double);&lt;/div&gt; </text>
     <title>Recommendations </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>436</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>436</unsignedLong:rowKey>
  </issue>
 </issues>
 <traits>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>50</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>52</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>60</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>62</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>63</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>75</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>155</int:fieldId>
   <int:id>4</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>80</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>148</int:fieldId>
   <int:id>5</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>80</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>108</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>113</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>126</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>127</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>128</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>129</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>130</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>131</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>132</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>133</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>134</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>135</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>136</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>137</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>155</int:fieldId>
   <int:id>4</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>139</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>148</int:fieldId>
   <int:id>5</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>139</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>155</int:fieldId>
   <int:id>4</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>144</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>148</int:fieldId>
   <int:id>5</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>144</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>155</int:fieldId>
   <int:id>4</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>152</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>148</int:fieldId>
   <int:id>5</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>152</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>156</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>158</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>160</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>161</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>163</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>164</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>166</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>169</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>170</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>171</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>172</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>173</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>175</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>176</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>177</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>183</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>189</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>190</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>191</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>192</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>193</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>194</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>195</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>196</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>198</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>201</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>202</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>203</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>204</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>205</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>206</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>207</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>211</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>214</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>215</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>218</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>219</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>220</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>226</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>235</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>236</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>237</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>251</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>253</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>254</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>256</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>257</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>264</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>266</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>284</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>285</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>287</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>301</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>303</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>155</int:fieldId>
   <int:id>4</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>307</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>148</int:fieldId>
   <int:id>5</int:id>
   <text>Low Trip Counts May Produce Ineffective Peeled/Remainder Loops After Vectorization - Consider Adding Data Padding or Identifying Expected Number of Iterations </text>
   <unsignedLong:rowKey>307</unsignedLong:rowKey>
  </trait>
 </traits>
</bag>
